version: '3.9'

services:
  # Creates a genesis state for the beacon chain using a YAML configuration file and
  # a deterministic set of 64 validators.
  create-beacon-chain-genesis:
    image: "gcr.io/prysmaticlabs/prysm/cmd/prysmctl:v5.2.0"
    platform: "linux/amd64"
    command:
      - testnet
      - generate-genesis
      - --fork=deneb
      - --num-validators=64
      - --genesis-time-delay=15
      - --output-ssz=/consensus/genesis.ssz
      - --chain-config-file=/consensus/config.yml
      - --geth-genesis-json-in=/execution/genesis.json
      - --geth-genesis-json-out=/execution/genesis.json
    volumes:
      - ./consensus:/consensus
      - ./execution:/execution

  # Sets up the genesis configuration for the go-ethereum client from a JSON file.
  reth-genesis:
    image: "ghcr.io/paradigmxyz/reth:latest"
    command: >
      init
      --datadir /execution
      --chain /execution/genesis.json
    volumes:
      - ./execution:/execution
      - ./execution/genesis.json:/execution/genesis.json
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully

  # Runs a Prysm beacon chain from a specified genesis state created in the previous step
  # and connects to go-ethereum in the same network as the execution client.
  # The account used in go-ethereum is set as the suggested fee recipient for transactions
  # proposed via the validators attached to the beacon node.
  beacon-chain:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:v5.2.0"
    platform: "linux/amd64"
    command:
      - --datadir=/consensus/beacondata
      # No peers to sync with in this testnet, so setting to 0
      - --min-sync-peers=0
      - --genesis-state=/consensus/genesis.ssz
      - --bootstrap-node=
      - --interop-eth1data-votes
      # The chain configuration file used for setting up Prysm
      - --chain-config-file=/consensus/config.yml
      # We specify the chain id used by our execution client
      - --chain-id=${CHAIN_ID:-32382}
      - --contract-deployment-block=0
      - --rpc-host=0.0.0.0
      - --grpc-gateway-host=0.0.0.0
      - --execution-endpoint=http://reth:8551
      - --accept-terms-of-use
      - --jwt-secret=/execution/jwtsecret
      - --suggested-fee-recipient=0xAAA91876b1F31feF286F5f1290b9c893aE56A08C
      - --minimum-peers-per-subnet=0
      - --enable-debug-rpc-endpoints
      - --force-clear-db
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully
    ports:
      - 4000:4000
      - 3500:3500
      #- 8080:8080
      - 6060:6060
      - 9090:9090
    volumes:
      - ./consensus:/consensus
      - ./execution:/execution
      - ./execution/jwtsecret:/execution/jwtsecret

  # Runs the go-ethereum execution client with the specified, unlocked account and necessary
  # APIs to allow for proof-of-stake consensus via Prysm.
  reth:
    restart: unless-stopped
    image: ghcr.io/paradigmxyz/reth
    ports:
      - '9001:9001' # metrics
      - '30303:30303' # eth/66 peering
      - '8545:8545' # rpc
      - '8546:8546' # rpc
      - '8551:8551' # engine
    volumes:
      - ./consensus:/consensus
      - ./execution:/execution
      - ./execution/retrh
      - ./execution/jwtsecret:/root/jwt/jwt.hex
    # https://paradigmxyz.github.io/reth/run/troubleshooting.html#concurrent-database-access-error-using-containersdocker
    pid: host
    # For Sepolia, replace `--chain mainnet` with `--chain sepolia`
    # For Holesky, replace `--chain mainnet` with `--chain holesky`
    command: >
      node
      --chain /execution/genesis.json
      --datadir /execution
      --metrics 0.0.0.0:9001
      --log.file.directory /root/logs
      --authrpc.addr 0.0.0.0
      --authrpc.port 8551
      --authrpc.jwtsecret /root/jwt/jwt.hex
      --http
      --http.api all
      --http.addr 0.0.0.0
      --http.port 8545
      --http.corsdomain "*"
      --ws
      --ws.api all
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.origins "*"
      --full
    depends_on:
      reth-genesis:
        condition: service_completed_successfully
      beacon-chain:
        condition: service_started

  # We run a validator client with 64, deterministically-generated keys that match
  # The validator keys present in the beacon chain genesis state generated a few steps above.
  validator:
    image: "gcr.io/prysmaticlabs/prysm/validator:v5.2.0"
    command:
      - --beacon-rpc-provider=beacon-chain:4000
      - --datadir=/consensus/validatordata
      - --accept-terms-of-use
      - --interop-num-validators=64
      - --interop-start-index=0
      - --chain-config-file=/consensus/config.yml
      - --force-clear-db
    depends_on:
      beacon-chain:
        condition: service_started
    volumes:
      - ./consensus:/consensus
